/*
 * Copyright (c) 2014-2015, Linaro Ltd and Contributors. All rights reserved.
 * Copyright (c) 2014-2015, Nexell Ltd and Contributors. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of ARM nor the names of its contributors may be used
 * to endorse or promote products derived from this software without specific
 * prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef __S5P6818_REGS_SYSTEM_H__
#define __S5P6818_REGS_SYSTEM_H__

#include "nx_s5p6818.h"

#define CLKPWR_CTRL_BASE			PHY_BASEADDR_CLKPWR_MODULE
#define TIEOFF_CTRL_BASE			PHY_BASEADDR_TIEOFF_MODULE

#define NXP_CPU_PWRDOWN_REQ_CTRL		(CLKPWR_CTRL_BASE + 0x2A0)
#define NXP_CPU_PWRUP_REQ_CTRL			(CLKPWR_CTRL_BASE + 0x2A4)
#define NXP_CPU_RESET_ENB_CTRL			(CLKPWR_CTRL_BASE + 0x2A8)
#define NXP_CPU_WARMRST_REQ_CTRL		(CLKPWR_CTRL_BASE + 0x2AC)
#define NXP_CPU_PWR_STATUS			(CLKPWR_CTRL_BASE + 0x2B4)

#define NXP_CPU_REQ_MASK			(0xFF << 0)

#define NXP_CPU_REQ_CTRL_CPU0			(1 << 0)
#define NXP_CPU_REQ_CTRL_CPU0_SHIFT		(0)
#define NXP_CPU_REQ_CTRL_CPU1			(1 << 1)
#define NXP_CPU_REQ_CTRL_CPU1_SHIFT		(1)
#define NXP_CPU_REQ_CTRL_CPU2			(1 << 2)
#define NXP_CPU_REQ_CTRL_CPU2_SHIFT		(2)
#define NXP_CPU_REQ_CTRL_CPU3			(1 << 3)
#define NXP_CPU_REQ_CTRL_CPU3_SHIFT		(3)
#define NXP_CPU_REQ_CTRL_CPU4			(1 << 4)
#define NXP_CPU_REQ_CTRL_CPU4_SHIFT		(4)
#define NXP_CPU_REQ_CTRL_CPU5			(1 << 5)
#define NXP_CPU_REQ_CTRL_CPU5_SHIFT		(5)
#define NXP_CPU_REQ_CTRL_CPU6			(1 << 6)
#define NXP_CPU_REQ_CTRL_CPU6_SHIFT		(6)
#define NXP_CPU_REQ_CTRL_CPU7			(1 << 7)
#define NXP_CPU_REQ_CTRL_CPU7_SHIFT		(7)

#define NXP_CPUx_PWRON_STATUS_SHIFT(x)		(x)
#define NXP_CPUx_PWROFF_STATUS_SHIFT(x)		(8 + x)

#define NXP_CPUx_PWRDOWN_REQ_SHIFT(x)	(NXP_CPU_REQ_CTRL_CPU0_SHIFT + x)
#define NXP_CPUx_PWRUP_REQ_SHIFT(x)	(NXP_CPU_REQ_CTRL_CPU0_SHIFT + x)
#define NXP_CPUx_WARMRST_REQ_SHIFT(x)	(NXP_CPU_REQ_CTRL_CPU0_SHIFT + x)


#define NXP_CPU_PWR_CTRL0			(TIEOFF_CTRL_BASE + 0x168)
#define NXP_CPU_PWR_CTRL1			(TIEOFF_CTRL_BASE + 0x1AC)
#define NXP_TIEOFF_REG(x)			(TIEOFF_CTRL_BASE + (x << 2))

#define NXP_CPU_PWR_CTRLx_MASK			(0xFFE << 20)

#define NXP_CPU_PWR_CTRL_STANDBYWFI0		(1 << 0)
#define NXP_CPU_PWR_CTRL_STANDBYWFI0_SHIFT	(0)
#define NXP_CPU_PWR_CTRL_STANDBYWFI1		(1 << 1)
#define NXP_CPU_PWR_CTRL_STANDBYWFI1_SHIFT	(1)
#define NXP_CPU_PWR_CTRL_STANDBYWFI2		(1 << 2)
#define NXP_CPU_PWR_CTRL_STANDBYWFI2_SHIFT	(2)
#define NXP_CPU_PWR_CTRL_STANDBYWFI3		(1 << 3)
#define NXP_CPU_PWR_CTRL_STANDBYWFI3_SHIFT	(3)

#define NXP_CPU_PWR_CTRL_STANDBYWFIL2		(1 << 4)
#define NXP_CPU_PWR_CTRL_STANDBYWFIL2_SHIFT	(4)

#define NXP_CPU_PWR_CTRL_STANDBYWFE0		(1 << 5)
#define NXP_CPU_PWR_CTRL_STANDBYWFE0_SHIFT	(5)
#define NXP_CPU_PWR_CTRL_STANDBYWFE1		(1 << 6)
#define NXP_CPU_PWR_CTRL_STANDBYWFE1_SHIFT	(6)
#define NXP_CPU_PWR_CTRL_STANDBYWFE2		(1 << 7)
#define NXP_CPU_PWR_CTRL_STANDBYWFE2_SHIFT	(7)
#define NXP_CPU_PWR_CTRL_STANDBYWFE3		(1 << 8)
#define NXP_CPU_PWR_CTRL_STANDBYWFE3_SHIFT	(8)

#define NXP_CPU_PWR_CTRL_CORE_DOWNPRE		(1 << 21)
#define NXP_CPU_PWR_CTRL_CORE_DOWNPRE_SHIFT	(21)
#define NXP_CPU_PWR_CTRL_CPU0_DOWNPRE		(1 << 22)
#define NXP_CPU_PWR_CTRL_CPU0_DOWNPRE_SHIFT	(22)
#define NXP_CPU_PWR_CTRL_CPU1_DOWNPRE		(1 << 23)
#define NXP_CPU_PWR_CTRL_CPU1_DOWNPRE_SHIFT	(23)
#define NXP_CPU_PWR_CTRL_CPU2_DOWNPRE		(1 << 24)
#define NXP_CPU_PWR_CTRL_CPU2_DOWNPRE_SHIFT	(24)
#define NXP_CPU_PWR_CTRL_CPU3_DOWNPRE		(1 << 25)
#define NXP_CPU_PWR_CTRL_CPU3_DOWNPRE_SHIFT	(25)

#define NXP_CPU_PWR_CTRL_CORE_DOWNALL		(1 << 26)
#define NXP_CPU_PWR_CTRL_CORE_DOWNALL_SHIFT	(26)
#define NXP_CPU_PWR_CTRL_CPU0_DOWNALL		(1 << 27)
#define NXP_CPU_PWR_CTRL_CPU0_DOWNALL_SHIFT	(27)
#define NXP_CPU_PWR_CTRL_CPU1_DOWNALL		(1 << 28)
#define NXP_CPU_PWR_CTRL_CPU1_DOWNALL_SHIFT	(28)
#define NXP_CPU_PWR_CTRL_CPU2_DOWNALL		(1 << 29)
#define NXP_CPU_PWR_CTRL_CPU2_DOWNALL_SHIFT	(29)
#define NXP_CPU_PWR_CTRL_CPU3_DOWNALL		(1 << 30)
#define NXP_CPU_PWR_CTRL_CPU3_DOWNALL_SHIFT	(30)


#define NXP_CPU_CLUSTER0_CTRL_BASE		(TIEOFF_CTRL_BASE + 0x13C)
#define NXP_CPU_CLUSTER0_AARCH64_SHIFT		(12)
#define NXP_CPU_0_AARCH64_MODE			(0x1 << 12)
#define NXP_CPU_1_AARCH64_MODE			(0x2 << 12)
#define NXP_CPU_2_AARCH64_MODE			(0x4 << 12)
#define NXP_CPU_3_AARCH64_MODE			(0x8 << 12)
#define NXP_CPU_0_3_AARCH64_MODE		(0xF << 12)

#define NXP_CPU_CLUSTER1_CTRL_BASE		(TIEOFF_CTRL_BASE + 0x180)
#define NXP_CPU_CLUSTER1_AARCH64_SHIFT		(4)
#define NXP_CPU_4_AARCH64_MODE			(0x1 << 4)
#define NXP_CPU_5_AARCH64_MODE			(0x2 << 4)
#define NXP_CPU_6_AARCH64_MODE			(0x4 << 4)
#define NXP_CPU_7_AARCH64_MODE			(0x8 << 4)
#define NXP_CPU_4_7_AARCH64_MODE		(0xF << 4)

#define NXP_CPU0_RVBARADDR			(TIEOFF_CTRL_BASE + 0x140)
#define NXP_CPU1_RVBARADDR			(TIEOFF_CTRL_BASE + 0x148)
#define NXP_CPU2_RVBARADDR			(TIEOFF_CTRL_BASE + 0x150)
#define NXP_CPU3_RVBARADDR			(TIEOFF_CTRL_BASE + 0x158)
#define NXP_CPU4_RVBARADDR			(TIEOFF_CTRL_BASE + 0x184)
#define NXP_CPU5_RVBARADDR			(TIEOFF_CTRL_BASE + 0x18C)
#define NXP_CPU6_RVBARADDR			(TIEOFF_CTRL_BASE + 0x194)
#define NXP_CPU7_RVBARADDR			(TIEOFF_CTRL_BASE + 0x19C)

#define NXP_CPU_CLUSTERx_CTRL(x)				\
	((x < 4) ? NXP_CPU_CLUSTER0_CTRL_BASE : NXP_CPU_CLUSTER1_CTRL_BASE)
#define NXP_CPU_CLUSTERx_AARCH64_SHIFT(x)			\
	((x < 4) ? (12 + x) : x)

#define NXP_CPUx_PWR_CTRL(x)					\
	((x < 4) ? NXP_CPU_PWR_CTRL0 : NXP_CPU_PWR_CTRL1)
#define NXP_CPUx_PWRDOWNALL_SHIFT(x)				\
	((x < 4) ? (NXP_CPU_PWR_CTRL_CPU0_DOWNALL_SHIFT + x) :	\
	 (NXP_CPU_PWR_CTRL_CPU0_DOWNALL_SHIFT + x - 4))
#define NXP_CPUx_PWRDOWNPRE_SHIFT(x)				\
	((x < 4) ? (NXP_CPU_PWR_CTRL_CPU0_DOWNPRE_SHIFT + x) :	\
	 (NXP_CPU_PWR_CTRL_CPU0_DOWNPRE_SHIFT + x - 4))
#define NXP_CPUx_RVBARADDR(x)					\
	((x < 4) ? (NXP_CPU0_RVBARADDR + 0x8 * x) :		\
	 (NXP_CPU4_RVBARADDR + 0x8 * (x - 4)))
#define NXP_CPU_PWR_STATUS_WFI(x)				\
	((x == 0) ? (TIEOFF_CTRL_BASE + (90<<2)) :		\
	 (TIEOFF_CTRL_BASE + (107<<2)))
#define NXP_CPU_SEV_TO_BUDDY(x)					\
	((x < 4) ? (TIEOFF_CTRL_BASE + 0x1bc) :		\
	 (TIEOFF_CTRL_BASE + 0x178))
#endif /* __S5P6818_REGS_SYSTEM_H__ */
